/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "留简",
  "description": "Just Text",
  "base": "/",
  "headTags": [
    [
      "link",
      {
        "rel": "icon",
        "href": "//yun.duiba.com.cn/aurora/assets/28757dfc494a84649d1b9e9e9daa3a57420d00cd.jpeg"
      },
      [
        "script",
        {
          "src": "https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js"
        }
      ],
      [
        "script",
        {
          "src": "https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"
        }
      ],
      [
        "script",
        {
          "src": "https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js"
        }
      ],
      [
        "script",
        {
          "src": "https://cdn.jsdelivr.net/npm/@babel/standalone/babel.min.js"
        }
      ]
    ]
  ],
  "pages": [
    {
      "title": "test",
      "frontmatter": {},
      "regularPath": "/DEMO/",
      "relativePath": "DEMO/README.md",
      "key": "v-b7d1f2ac",
      "path": "/DEMO/",
      "headers": [
        {
          "level": 2,
          "title": "*",
          "slug": ""
        },
        {
          "level": 2,
          "title": "游戏",
          "slug": "游戏"
        }
      ]
    },
    {
      "title": "动态背景图",
      "frontmatter": {},
      "regularPath": "/DEMO/%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF%E5%9B%BE.html",
      "relativePath": "DEMO/动态背景图.md",
      "key": "v-2fea115b",
      "path": "/DEMO/%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF%E5%9B%BE.html"
    },
    {
      "title": "拼图游戏🧩",
      "frontmatter": {},
      "regularPath": "/DEMO/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F.html",
      "relativePath": "DEMO/拼图游戏.md",
      "key": "v-4bad4e6a",
      "path": "/DEMO/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "git地址",
          "slug": "git地址"
        },
        {
          "level": 2,
          "title": "First version",
          "slug": "first-version"
        },
        {
          "level": 2,
          "title": "OOP",
          "slug": "oop"
        }
      ]
    },
    {
      "title": "填色游戏",
      "frontmatter": {},
      "regularPath": "/DEMO/%E5%A1%AB%E8%89%B2%E6%B8%B8%E6%88%8F.html",
      "relativePath": "DEMO/填色游戏.md",
      "key": "v-178a7dd0",
      "path": "/DEMO/%E5%A1%AB%E8%89%B2%E6%B8%B8%E6%88%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "git地址",
          "slug": "git地址"
        },
        {
          "level": 2,
          "title": "start",
          "slug": "start"
        }
      ]
    },
    {
      "title": "时钟⏰",
      "frontmatter": {},
      "regularPath": "/DEMO/%E6%97%B6%E9%92%9F.html",
      "relativePath": "DEMO/时钟.md",
      "key": "v-6113fbe9",
      "path": "/DEMO/%E6%97%B6%E9%92%9F.html"
    },
    {
      "title": "学习笔记",
      "frontmatter": {},
      "regularPath": "/Note/",
      "relativePath": "Note/README.md",
      "key": "v-4fd08e8a",
      "path": "/Note/"
    },
    {
      "title": "贪吃蛇",
      "frontmatter": {},
      "regularPath": "/DEMO/%E8%B4%AA%E5%90%83%E8%9B%87.html",
      "relativePath": "DEMO/贪吃蛇.md",
      "key": "v-a3522308",
      "path": "/DEMO/%E8%B4%AA%E5%90%83%E8%9B%87.html",
      "headers": [
        {
          "level": 2,
          "title": "git地址",
          "slug": "git地址"
        },
        {
          "level": 2,
          "title": "start",
          "slug": "start"
        }
      ]
    },
    {
      "title": "UniApp",
      "frontmatter": {},
      "regularPath": "/Note/UniApp.html",
      "relativePath": "Note/UniApp.md",
      "key": "v-10e74181",
      "path": "/Note/UniApp.html",
      "headers": [
        {
          "level": 2,
          "title": "UniApp01",
          "slug": "uniapp01"
        },
        {
          "level": 3,
          "title": "注册账号",
          "slug": "注册账号"
        },
        {
          "level": 3,
          "title": "新建项目",
          "slug": "新建项目"
        },
        {
          "level": 3,
          "title": "插件",
          "slug": "插件"
        },
        {
          "level": 2,
          "title": "项目的运行",
          "slug": "项目的运行"
        },
        {
          "level": 3,
          "title": "微信",
          "slug": "微信"
        },
        {
          "level": 3,
          "title": "手机端运行",
          "slug": "手机端运行"
        },
        {
          "level": 3,
          "title": "真机运行",
          "slug": "真机运行"
        },
        {
          "level": 2,
          "title": "Hello World",
          "slug": "hello-world"
        },
        {
          "level": 3,
          "title": "关于官方组件",
          "slug": "关于官方组件"
        },
        {
          "level": 3,
          "title": "自定义组件",
          "slug": "自定义组件"
        },
        {
          "level": 2,
          "title": "路由系统",
          "slug": "路由系统"
        },
        {
          "level": 2,
          "title": "生命周期",
          "slug": "生命周期"
        },
        {
          "level": 2,
          "title": "面试推荐",
          "slug": "面试推荐"
        },
        {
          "level": 2,
          "title": "复习",
          "slug": "复习"
        },
        {
          "level": 2,
          "title": "Uni-UI",
          "slug": "uni-ui"
        },
        {
          "level": 2,
          "title": "抓取网站接口",
          "slug": "抓取网站接口"
        },
        {
          "level": 2,
          "title": "带有网络操作的页面制作步骤",
          "slug": "带有网络操作的页面制作步骤"
        },
        {
          "level": 2,
          "title": "角标",
          "slug": "角标"
        },
        {
          "level": 2,
          "title": "卡片",
          "slug": "卡片"
        },
        {
          "level": 2,
          "title": "网络操作",
          "slug": "网络操作"
        },
        {
          "level": 2,
          "title": "折叠栏",
          "slug": "折叠栏"
        },
        {
          "level": 2,
          "title": "通告栏",
          "slug": "通告栏"
        },
        {
          "level": 2,
          "title": "步骤条",
          "slug": "步骤条"
        },
        {
          "level": 2,
          "title": "宫格布局",
          "slug": "宫格布局"
        },
        {
          "level": 2,
          "title": "加载更多 下拉刷新",
          "slug": "加载更多-下拉刷新"
        },
        {
          "level": 2,
          "title": "跨域",
          "slug": "跨域"
        },
        {
          "level": 2,
          "title": "条件编译",
          "slug": "条件编译"
        },
        {
          "level": 2,
          "title": "滚动指示点",
          "slug": "滚动指示点"
        },
        {
          "level": 2,
          "title": "标签",
          "slug": "标签"
        },
        {
          "level": 2,
          "title": "评分",
          "slug": "评分"
        },
        {
          "level": 2,
          "title": "商品导航",
          "slug": "商品导航"
        },
        {
          "level": 2,
          "title": "日期格式化",
          "slug": "日期格式化"
        },
        {
          "level": 2,
          "title": "列表",
          "slug": "列表"
        },
        {
          "level": 2,
          "title": "列表 + 网络请求",
          "slug": "列表-网络请求"
        },
        {
          "level": 2,
          "title": "自定义导航栏",
          "slug": "自定义导航栏"
        },
        {
          "level": 2,
          "title": "弹出框",
          "slug": "弹出框"
        },
        {
          "level": 2,
          "title": "侧边栏",
          "slug": "侧边栏"
        },
        {
          "level": 2,
          "title": "刷新DOM",
          "slug": "刷新dom"
        },
        {
          "level": 2,
          "title": "自定义头部标签",
          "slug": "自定义头部标签"
        }
      ]
    },
    {
      "frontmatter": {},
      "regularPath": "/Note/game.html",
      "relativePath": "Note/game.md",
      "key": "v-3b345e3e",
      "path": "/Note/game.html"
    },
    {
      "title": "🚚..........ᴅᴜᴅᴜ",
      "frontmatter": {},
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-5d870e1a",
      "path": "/",
      "headers": [
        {
          "level": 2,
          "title": "☁Keep moving forward🏃‍♀️",
          "slug": "☁keep-moving-forward🏃‍♀️"
        }
      ]
    },
    {
      "title": "- docs/.vuepress: 用于存放全局的配置、组件、静态资源等。",
      "frontmatter": {},
      "regularPath": "/guide/",
      "relativePath": "guide/README.md",
      "key": "v-50b08480",
      "path": "/guide/"
    },
    {
      "title": "微信小程序",
      "frontmatter": {},
      "regularPath": "/Note/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.html",
      "relativePath": "Note/微信小程序.md",
      "key": "v-8d69cbbc",
      "path": "/Note/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "下载最新版开发工具（稳定版）：",
          "slug": "下载最新版开发工具-稳定版"
        },
        {
          "level": 2,
          "title": "小程序的接入流程",
          "slug": "小程序的接入流程"
        },
        {
          "level": 3,
          "title": "创建小程序项目",
          "slug": "创建小程序项目"
        },
        {
          "level": 3,
          "title": "小程序项目的文件结构",
          "slug": "小程序项目的文件结构"
        },
        {
          "level": 2,
          "title": "小程序组件库",
          "slug": "小程序组件库"
        },
        {
          "level": 3,
          "title": "组件概述",
          "slug": "组件概述"
        },
        {
          "level": 3,
          "title": "<view> 组件",
          "slug": "view-组件"
        },
        {
          "level": 2,
          "title": "小程序组件库",
          "slug": "小程序组件库-2"
        },
        {
          "level": 3,
          "title": "组件概述",
          "slug": "组件概述-2"
        },
        {
          "level": 3,
          "title": "<image> 组件",
          "slug": "image-组件"
        },
        {
          "level": 3,
          "title": "<swiper> 组件",
          "slug": "swiper-组件"
        },
        {
          "level": 3,
          "title": "<text> 组件",
          "slug": "text-组件"
        },
        {
          "level": 3,
          "title": "<navigator> 组件",
          "slug": "navigator-组件"
        },
        {
          "level": 3,
          "title": "<scroll-view> 组件",
          "slug": "scroll-view-组件"
        },
        {
          "level": 3,
          "title": "<input> 组件",
          "slug": "input-组件"
        },
        {
          "level": 3,
          "title": "WXML 数据渲染语法基础",
          "slug": "wxml-数据渲染语法基础"
        },
        {
          "level": 3,
          "title": "<radio-group> 组件",
          "slug": "radio-group-组件"
        },
        {
          "level": 3,
          "title": "<checkbox-group> 组件",
          "slug": "checkbox-group-组件"
        },
        {
          "level": 3,
          "title": "<picker> 组件",
          "slug": "picker-组件"
        },
        {
          "level": 3,
          "title": "<button> 组件",
          "slug": "button-组件"
        },
        {
          "level": 3,
          "title": "小程序事件基础",
          "slug": "小程序事件基础"
        },
        {
          "level": 2,
          "title": "微信小程序 API",
          "slug": "微信小程序-api"
        },
        {
          "level": 3,
          "title": "界面交互类 API",
          "slug": "界面交互类-api"
        },
        {
          "level": 3,
          "title": "路由类 API",
          "slug": "路由类-api"
        },
        {
          "level": 2,
          "title": "微信小程序的生命周期",
          "slug": "微信小程序的生命周期"
        },
        {
          "level": 3,
          "title": "小程序页面的生命周期",
          "slug": "小程序页面的生命周期"
        },
        {
          "level": 3,
          "title": "小程序应用的生命周期",
          "slug": "小程序应用的生命周期"
        },
        {
          "level": 3,
          "title": "微信小程序网络相关 API",
          "slug": "微信小程序网络相关-api"
        },
        {
          "level": 3,
          "title": "测试连接：",
          "slug": "测试连接"
        },
        {
          "level": 3,
          "title": "https://api.tedu.cn/index.php?cid=1",
          "slug": "https-api-tedu-cn-index-php-cid-1"
        },
        {
          "level": 2,
          "title": "学子影院",
          "slug": "学子影院"
        },
        {
          "level": 3,
          "title": "初始化项目",
          "slug": "初始化项目"
        },
        {
          "level": 3,
          "title": "初始化加载热映类别下的电影列表",
          "slug": "初始化加载热映类别下的电影列表"
        },
        {
          "level": 3,
          "title": "切换顶部导航选中项更新列表",
          "slug": "切换顶部导航选中项更新列表"
        },
        {
          "level": 3,
          "title": "页面滚动到底部后加载下一页",
          "slug": "页面滚动到底部后加载下一页"
        },
        {
          "level": 3,
          "title": "封装 loadMovies 方法",
          "slug": "封装-loadmovies-方法"
        },
        {
          "level": 3,
          "title": "封装 loadMovies 方法",
          "slug": "封装-loadmovies-方法-2"
        },
        {
          "level": 3,
          "title": "小程序缓存设计方案",
          "slug": "小程序缓存设计方案"
        },
        {
          "level": 3,
          "title": "切换选项卡的时候处理缓存",
          "slug": "切换选项卡的时候处理缓存"
        },
        {
          "level": 3,
          "title": "基于下拉刷新实现缓存的更新",
          "slug": "基于下拉刷新实现缓存的更新"
        },
        {
          "level": 3,
          "title": "更新左上角定位城市",
          "slug": "更新左上角定位城市"
        },
        {
          "level": 3,
          "title": "显示电影详情页",
          "slug": "显示电影详情页"
        },
        {
          "level": 2,
          "title": "小程序云开发",
          "slug": "小程序云开发"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 3,
          "title": "开通云开发服务",
          "slug": "开通云开发服务"
        },
        {
          "level": 2,
          "title": "小程序云开发",
          "slug": "小程序云开发-2"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述-2"
        },
        {
          "level": 3,
          "title": "开通云开发服务",
          "slug": "开通云开发服务-2"
        },
        {
          "level": 3,
          "title": "云数据库",
          "slug": "云数据库"
        },
        {
          "level": 3,
          "title": "云数据库的程序操作",
          "slug": "云数据库的程序操作"
        },
        {
          "level": 3,
          "title": "重新选择当前城市业务流程",
          "slug": "重新选择当前城市业务流程"
        },
        {
          "level": 3,
          "title": "重新选择当前城市业务流程",
          "slug": "重新选择当前城市业务流程-2"
        },
        {
          "level": 3,
          "title": "若用户没有赋予定位权限，处理定位业务",
          "slug": "若用户没有赋予定位权限-处理定位业务"
        },
        {
          "level": 3,
          "title": "影院页面实现",
          "slug": "影院页面实现"
        },
        {
          "level": 2,
          "title": "自定义组件库",
          "slug": "自定义组件库"
        },
        {
          "level": 3,
          "title": "小程序的自定义组件",
          "slug": "小程序的自定义组件"
        },
        {
          "level": 2,
          "title": "自定义组件库",
          "slug": "自定义组件库-2"
        },
        {
          "level": 3,
          "title": "小程序的自定义组件",
          "slug": "小程序的自定义组件-2"
        },
        {
          "level": 3,
          "title": "如何自定义组件？",
          "slug": "如何自定义组件"
        },
        {
          "level": 3,
          "title": "微信小程序组件库",
          "slug": "微信小程序组件库"
        },
        {
          "level": 3,
          "title": "基于 vant 组件库实现“我的”页面",
          "slug": "基于-vant-组件库实现-我的-页面"
        },
        {
          "level": 3,
          "title": "实现微信登录，更新个人信息",
          "slug": "实现微信登录-更新个人信息"
        },
        {
          "level": 3,
          "title": "点击头像，更换头像",
          "slug": "点击头像-更换头像"
        },
        {
          "level": 3,
          "title": "云开发之云存储",
          "slug": "云开发之云存储"
        },
        {
          "level": 3,
          "title": "当第一次使用该小程序点击登录时的业务",
          "slug": "当第一次使用该小程序点击登录时的业务"
        },
        {
          "level": 3,
          "title": "云函数",
          "slug": "云函数"
        }
      ]
    },
    {
      "title": "React 学习笔记 📒",
      "frontmatter": {},
      "regularPath": "/Note/react.html",
      "relativePath": "Note/react.md",
      "key": "v-7e8c5869",
      "path": "/Note/react.html",
      "headers": [
        {
          "level": 2,
          "title": "1.1. React 简介",
          "slug": "_1-1-react-简介"
        },
        {
          "level": 3,
          "title": "1.1.1. 官网",
          "slug": "_1-1-1-官网"
        },
        {
          "level": 2,
          "title": "1.2. React 的基本使用",
          "slug": "_1-2-react-的基本使用"
        },
        {
          "level": 3,
          "title": "1.2.1. 效果",
          "slug": "_1-2-1-效果"
        },
        {
          "level": 3,
          "title": "1.2.2. 相关 js 库",
          "slug": "_1-2-2-相关-js-库"
        },
        {
          "level": 3,
          "title": "1.2.3. 创建虚拟 DOM 的两种方式",
          "slug": "_1-2-3-创建虚拟-dom-的两种方式"
        },
        {
          "level": 3,
          "title": "1.2.4. 虚拟 DOM 与真实 DOM",
          "slug": "_1-2-4-虚拟-dom-与真实-dom"
        },
        {
          "level": 2,
          "title": "1.3. React JSX",
          "slug": "_1-3-react-jsx"
        },
        {
          "level": 3,
          "title": "1.3.1. 效果",
          "slug": "_1-3-1-效果"
        },
        {
          "level": 3,
          "title": "1.3.2. JSX",
          "slug": "_1-3-2-jsx"
        },
        {
          "level": 3,
          "title": "1.3.3. 渲染虚拟 DOM(元素)",
          "slug": "_1-3-3-渲染虚拟-dom-元素"
        },
        {
          "level": 3,
          "title": "1.3.4. JSX 练习",
          "slug": "_1-3-4-jsx-练习"
        },
        {
          "level": 2,
          "title": "1.4. 模块与组件、模块化与组件化的理解",
          "slug": "_1-4-模块与组件、模块化与组件化的理解"
        },
        {
          "level": 3,
          "title": "1.4.1. 模块",
          "slug": "_1-4-1-模块"
        },
        {
          "level": 3,
          "title": "1.4.2. 组件",
          "slug": "_1-4-2-组件"
        },
        {
          "level": 3,
          "title": "1.4.3. 模块化",
          "slug": "_1-4-3-模块化"
        },
        {
          "level": 3,
          "title": "1.4.4. 组件化",
          "slug": "_1-4-4-组件化"
        },
        {
          "level": 2,
          "title": "2.1. 基本理解和使用",
          "slug": "_2-1-基本理解和使用"
        },
        {
          "level": 3,
          "title": "2.1.1. 使用 React 开发者工具调试",
          "slug": "_2-1-1-使用-react-开发者工具调试"
        },
        {
          "level": 3,
          "title": "2.1.2. 效果",
          "slug": "_2-1-2-效果"
        },
        {
          "level": 3,
          "title": "2.1.3. 注意",
          "slug": "_2-1-3-注意"
        },
        {
          "level": 3,
          "title": "2.1.4. 渲染类组件标签的基本流程",
          "slug": "_2-1-4-渲染类组件标签的基本流程"
        },
        {
          "level": 2,
          "title": "2.2. 组件三大核心属性 1: state",
          "slug": "_2-2-组件三大核心属性-1-state"
        },
        {
          "level": 3,
          "title": "2.2.1. 效果",
          "slug": "_2-2-1-效果"
        },
        {
          "level": 3,
          "title": "2.2.2. 理解",
          "slug": "_2-2-2-理解"
        },
        {
          "level": 3,
          "title": "2.2.3. 强烈注意",
          "slug": "_2-2-3-强烈注意"
        },
        {
          "level": 3,
          "title": "2.2.4 补充",
          "slug": "_2-2-4-补充"
        },
        {
          "level": 3,
          "title": "生命周期",
          "slug": "生命周期"
        },
        {
          "level": 2,
          "title": "2.3. 组件三大核心属性 2: props",
          "slug": "_2-3-组件三大核心属性-2-props"
        },
        {
          "level": 3,
          "title": "2.3.1. 效果",
          "slug": "_2-3-1-效果"
        },
        {
          "level": 3,
          "title": "2.3.2. 理解",
          "slug": "_2-3-2-理解"
        },
        {
          "level": 3,
          "title": "2.3.3. 作用",
          "slug": "_2-3-3-作用"
        },
        {
          "level": 3,
          "title": "2.3.4. 编码操作",
          "slug": "_2-3-4-编码操作"
        },
        {
          "level": 2,
          "title": "2.4. 组件三大核心属性 3: refs 与事件处理",
          "slug": "_2-4-组件三大核心属性-3-refs-与事件处理"
        },
        {
          "level": 3,
          "title": "2.4.1. 效果",
          "slug": "_2-4-1-效果"
        },
        {
          "level": 3,
          "title": "2.4.2. 理解",
          "slug": "_2-4-2-理解"
        },
        {
          "level": 3,
          "title": "2.4.3. 编码",
          "slug": "_2-4-3-编码"
        },
        {
          "level": 3,
          "title": "2.4.4. 事件处理",
          "slug": "_2-4-4-事件处理"
        },
        {
          "level": 2,
          "title": "2.5. 收集表单数据",
          "slug": "_2-5-收集表单数据"
        },
        {
          "level": 3,
          "title": "2.5.1. 效果",
          "slug": "_2-5-1-效果"
        },
        {
          "level": 3,
          "title": "2.5.2. 理解",
          "slug": "_2-5-2-理解"
        },
        {
          "level": 2,
          "title": "2.6. 组件的生命周期",
          "slug": "_2-6-组件的生命周期"
        },
        {
          "level": 3,
          "title": "2.6.1. 效果",
          "slug": "_2-6-1-效果"
        },
        {
          "level": 3,
          "title": "2.6.2. 理解",
          "slug": "_2-6-2-理解"
        },
        {
          "level": 3,
          "title": "2.6.3. 生命周期流程图(旧)",
          "slug": "_2-6-3-生命周期流程图-旧"
        },
        {
          "level": 3,
          "title": "2.6.4. 生命周期流程图(新)",
          "slug": "_2-6-4-生命周期流程图-新"
        },
        {
          "level": 3,
          "title": "2.6.5. 重要的勾子",
          "slug": "_2-6-5-重要的勾子"
        },
        {
          "level": 3,
          "title": "2.6.6. 即将废弃的勾子",
          "slug": "_2-6-6-即将废弃的勾子"
        },
        {
          "level": 2,
          "title": "2.7. 虚拟 DOM 与 DOM Diffing 算法",
          "slug": "_2-7-虚拟-dom-与-dom-diffing-算法"
        },
        {
          "level": 3,
          "title": "2.7.1. 效果",
          "slug": "_2-7-1-效果"
        },
        {
          "level": 3,
          "title": "2.7.2. 基本原理图",
          "slug": "_2-7-2-基本原理图"
        },
        {
          "level": 2,
          "title": "3.1. 使用 create-react-app 创建 react 应用",
          "slug": "_3-1-使用-create-react-app-创建-react-应用"
        },
        {
          "level": 3,
          "title": "3.1.1. react 脚手架",
          "slug": "_3-1-1-react-脚手架"
        },
        {
          "level": 3,
          "title": "3.1.2. 创建项目并启动",
          "slug": "_3-1-2-创建项目并启动"
        },
        {
          "level": 3,
          "title": "3.1.3. react 脚手架项目结构",
          "slug": "_3-1-3-react-脚手架项目结构"
        },
        {
          "level": 3,
          "title": "Rcc: 类式组件",
          "slug": "rcc-类式组件"
        },
        {
          "level": 3,
          "title": "3.1.4. 功能界面的组件化编码流程（通用）",
          "slug": "_3-1-4-功能界面的组件化编码流程-通用"
        },
        {
          "level": 2,
          "title": "3.2. 组件的组合使用-TodoList",
          "slug": "_3-2-组件的组合使用-todolist"
        },
        {
          "level": 2,
          "title": "React ajax 理解",
          "slug": "react-ajax-理解"
        },
        {
          "level": 3,
          "title": "4.1.1. 前置说明",
          "slug": "_4-1-1-前置说明"
        },
        {
          "level": 3,
          "title": "4.1.2. 常用的 ajax 请求库",
          "slug": "_4-1-2-常用的-ajax-请求库"
        },
        {
          "level": 2,
          "title": "4.2. axios",
          "slug": "_4-2-axios"
        },
        {
          "level": 3,
          "title": "4.2.1. 文档",
          "slug": "_4-2-1-文档"
        },
        {
          "level": 3,
          "title": "4.2.2. 相关 API",
          "slug": "_4-2-2-相关-api"
        },
        {
          "level": 2,
          "title": "4.3. 案例—github 用户搜索",
          "slug": "_4-3-案例-github-用户搜索"
        },
        {
          "level": 3,
          "title": "4.3.1. 效果",
          "slug": "_4-3-1-效果"
        },
        {
          "level": 2,
          "title": "4.4. 消息订阅-发布机制",
          "slug": "_4-4-消息订阅-发布机制"
        },
        {
          "level": 2,
          "title": "4.5. 扩展：Fetch",
          "slug": "_4-5-扩展-fetch"
        },
        {
          "level": 3,
          "title": "4.5.1. 文档",
          "slug": "_4-5-1-文档"
        },
        {
          "level": 3,
          "title": "4.5.2. 特点",
          "slug": "_4-5-2-特点"
        },
        {
          "level": 3,
          "title": "4.5.3. 相关 API",
          "slug": "_4-5-3-相关-api"
        },
        {
          "level": 2,
          "title": "6.1. 流行的开源 React UI 组件库",
          "slug": "_6-1-流行的开源-react-ui-组件库"
        },
        {
          "level": 3,
          "title": "6.1.1. material-ui(国外)",
          "slug": "_6-1-1-material-ui-国外"
        },
        {
          "level": 3,
          "title": "6.1.2. ant-design(国内蚂蚁金服)",
          "slug": "_6-1-2-ant-design-国内蚂蚁金服"
        },
        {
          "level": 2,
          "title": "7.1. redux 理解",
          "slug": "_7-1-redux-理解"
        },
        {
          "level": 3,
          "title": "7.1.1. 学习文档",
          "slug": "_7-1-1-学习文档"
        },
        {
          "level": 3,
          "title": "7.1.2. redux 是什么",
          "slug": "_7-1-2-redux-是什么"
        },
        {
          "level": 3,
          "title": "7.1.3. 什么情况下需要使用 redux",
          "slug": "_7-1-3-什么情况下需要使用-redux"
        },
        {
          "level": 3,
          "title": "7.1.4. redux 工作流程",
          "slug": "_7-1-4-redux-工作流程"
        },
        {
          "level": 2,
          "title": "7.2. redux 的三个核心概念",
          "slug": "_7-2-redux-的三个核心概念"
        },
        {
          "level": 3,
          "title": "7.2.1. action",
          "slug": "_7-2-1-action"
        },
        {
          "level": 3,
          "title": "7.2.2. reducer",
          "slug": "_7-2-2-reducer"
        },
        {
          "level": 3,
          "title": "7.2.3. store",
          "slug": "_7-2-3-store"
        },
        {
          "level": 2,
          "title": "7.3. redux 的核心 API",
          "slug": "_7-3-redux-的核心-api"
        },
        {
          "level": 3,
          "title": "7.3.1. createstore()",
          "slug": "_7-3-1-createstore"
        },
        {
          "level": 3,
          "title": "7.3.2. store 对象",
          "slug": "_7-3-2-store-对象"
        },
        {
          "level": 3,
          "title": "7.3.3. applyMiddleware()",
          "slug": "_7-3-3-applymiddleware"
        },
        {
          "level": 3,
          "title": "7.3.4. combineReducers()",
          "slug": "_7-3-4-combinereducers"
        },
        {
          "level": 2,
          "title": "7.4. 使用 redux 编写应用",
          "slug": "_7-4-使用-redux-编写应用"
        },
        {
          "level": 2,
          "title": "7.5. redux 异步编程",
          "slug": "_7-5-redux-异步编程"
        },
        {
          "level": 3,
          "title": "7.5.1 理解：",
          "slug": "_7-5-1-理解"
        },
        {
          "level": 3,
          "title": "7.5.2. 使用异步中间件",
          "slug": "_7-5-2-使用异步中间件"
        },
        {
          "level": 2,
          "title": "7.6. react-redux",
          "slug": "_7-6-react-redux"
        },
        {
          "level": 3,
          "title": "7.6.1. 理解",
          "slug": "_7-6-1-理解"
        },
        {
          "level": 3,
          "title": "7.6.2. react-Redux 将所有组件分成两大类",
          "slug": "_7-6-2-react-redux-将所有组件分成两大类"
        },
        {
          "level": 3,
          "title": "7.6.3. 相关 API",
          "slug": "_7-6-3-相关-api"
        },
        {
          "level": 2,
          "title": "7.7. 使用上 redux 调试工具",
          "slug": "_7-7-使用上-redux-调试工具"
        },
        {
          "level": 3,
          "title": "7.7.1. 安装 chrome 浏览器插件",
          "slug": "_7-7-1-安装-chrome-浏览器插件"
        },
        {
          "level": 3,
          "title": "7.7.2. 下载工具依赖包",
          "slug": "_7-7-2-下载工具依赖包"
        },
        {
          "level": 2,
          "title": "7.8. 纯函数和高阶函数",
          "slug": "_7-8-纯函数和高阶函数"
        },
        {
          "level": 3,
          "title": "7.8.1. 纯函数",
          "slug": "_7-8-1-纯函数"
        },
        {
          "level": 3,
          "title": "7.8.2. 高阶函数",
          "slug": "_7-8-2-高阶函数"
        },
        {
          "level": 2,
          "title": "React Hooks 是什么？",
          "slug": "react-hooks-是什么"
        },
        {
          "level": 3,
          "title": "Hooks API",
          "slug": "hooks-api"
        },
        {
          "level": 3,
          "title": "useState",
          "slug": "usestate"
        },
        {
          "level": 3,
          "title": "useReducer",
          "slug": "usereducer"
        },
        {
          "level": 3,
          "title": "useEffect",
          "slug": "useeffect"
        },
        {
          "level": 3,
          "title": "useMemo",
          "slug": "usememo"
        },
        {
          "level": 3,
          "title": "useContext",
          "slug": "usecontext"
        },
        {
          "level": 3,
          "title": "useRef",
          "slug": "useref"
        },
        {
          "level": 2,
          "title": "React 状态共享方案",
          "slug": "react-状态共享方案"
        },
        {
          "level": 3,
          "title": "Mixins",
          "slug": "mixins"
        },
        {
          "level": 3,
          "title": "HOC",
          "slug": "hoc"
        },
        {
          "level": 3,
          "title": "Render Props",
          "slug": "render-props"
        },
        {
          "level": 3,
          "title": "Hooks",
          "slug": "hooks"
        },
        {
          "level": 2,
          "title": "React Hooks 设计理念",
          "slug": "react-hooks-设计理念"
        },
        {
          "level": 3,
          "title": "基本原理",
          "slug": "基本原理"
        },
        {
          "level": 3,
          "title": "函数式贯彻到底",
          "slug": "函数式贯彻到底"
        },
        {
          "level": 3,
          "title": "实现原理",
          "slug": "实现原理"
        },
        {
          "level": 2,
          "title": "基于 Hooks，增强 Hooks",
          "slug": "基于-hooks-增强-hooks"
        },
        {
          "level": 3,
          "title": "来一套组合拳吧！",
          "slug": "来一套组合拳吧"
        },
        {
          "level": 3,
          "title": "useDidMount",
          "slug": "usedidmount"
        },
        {
          "level": 3,
          "title": "",
          "slug": ""
        },
        {
          "level": 3,
          "title": "useDidUpdate",
          "slug": "usedidupdate"
        },
        {
          "level": 3,
          "title": "useWillUnmount",
          "slug": "usewillunmount"
        },
        {
          "level": 3,
          "title": "useHover",
          "slug": "usehover"
        },
        {
          "level": 3,
          "title": "useField",
          "slug": "usefield"
        },
        {
          "level": 2,
          "title": "注意事项",
          "slug": "注意事项"
        },
        {
          "level": 2,
          "title": "结语",
          "slug": "结语"
        }
      ],
      "excerpt": "<h1 id=\"react-学习笔记-📒\"><a class=\"header-anchor\" href=\"#react-学习笔记-📒\">#</a> React 学习笔记 📒</h1>\n<p>第 1 章. React 基础</p>\n<h2 id=\"_1-1-react-简介\"><a class=\"header-anchor\" href=\"#_1-1-react-简介\">#</a> 1.1. React 简介</h2>\n<h3 id=\"_1-1-1-官网\"><a class=\"header-anchor\" href=\"#_1-1-1-官网\">#</a> 1.1.1. 官网</h3>\n<p>\\1. 英文官网:https://reactjs.org/</p>\n<p>\\2. 中文官网: https://react.docschina.org/</p>\n<p>1.1.2. 介绍描述</p>\n<p>\\1. 用于动态构建用户界面的 JavaScript 库(只关注于视图)</p>\n<p>\\2. 由 Facebook 开源</p>\n<p>1.1.3. React 的特点</p>\n<p>\\1. 声明式编码</p>\n<p>\\2. 组件化编码</p>\n<p>\\3. React Native 编写原生应用</p>\n<p>\\4. 高效（优秀的 Diffing 算法）</p>\n<p>1.1.4. React 高效的原因</p>\n<p>\\1. 使用虚拟(virtual)DOM, 不总是直接操作页面真实 DOM。</p>\n<p>\\2. DOM Diffing 算法, 最小化页面重绘。</p>\n<h2 id=\"_1-2-react-的基本使用\"><a class=\"header-anchor\" href=\"#_1-2-react-的基本使用\">#</a> 1.2. React 的基本使用</h2>\n<h3 id=\"_1-2-1-效果\"><a class=\"header-anchor\" href=\"#_1-2-1-效果\">#</a> 1.2.1. 效果</h3>\n<h3 id=\"_1-2-2-相关-js-库\"><a class=\"header-anchor\" href=\"#_1-2-2-相关-js-库\">#</a> 1.2.2. 相关 js 库</h3>\n<p>\\1. react.js：React 核心库。</p>\n<p>\\2. react-dom.js：提供操作 DOM 的 react 扩展库。</p>\n<p>\\3. babel.min.js：解析 JSX 语法代码转为 JS 代码的库。</p>\n<h3 id=\"_1-2-3-创建虚拟-dom-的两种方式\"><a class=\"header-anchor\" href=\"#_1-2-3-创建虚拟-dom-的两种方式\">#</a> 1.2.3. 创建虚拟 DOM 的两种方式</h3>\n<p>\\1. 纯 JS 方式(一般不用)</p>\n<p>\\2. JSX 方式</p>\n<h3 id=\"_1-2-4-虚拟-dom-与真实-dom\"><a class=\"header-anchor\" href=\"#_1-2-4-虚拟-dom-与真实-dom\">#</a> 1.2.4. 虚拟 DOM 与真实 DOM</h3>\n<p>\\1. React 提供了一些 API 来创建一种 “特别” 的一般 js 对象</p>\n<p>l <strong>const**<strong>VDOM*</strong>*=**<strong>React*</strong>*.createElement('xx', {id:'xx'}, 'xx')</strong></p>\n<p>l 上面创建的就是一个简单的虚拟 DOM 对象</p>\n<p>\\2. 虚拟 DOM 对象最终都会被 React 转换为真实的 DOM</p>\n<p>\\3. 我们编码时基本只需要操作 react 的虚拟 DOM 相关数据, react 会转换为真实 DOM 变化而更新界。</p>\n<h2 id=\"_1-3-react-jsx\"><a class=\"header-anchor\" href=\"#_1-3-react-jsx\">#</a> 1.3. React JSX</h2>\n<h3 id=\"_1-3-1-效果\"><a class=\"header-anchor\" href=\"#_1-3-1-效果\">#</a> 1.3.1. 效果</h3>\n<h3 id=\"_1-3-2-jsx\"><a class=\"header-anchor\" href=\"#_1-3-2-jsx\">#</a> 1.3.2. JSX</h3>\n<p>\\1. 全称: JavaScript XML</p>\n<p>\\2. react 定义的一种类似于 XML 的 JS 扩展语法: JS + XML 本质是<strong>React</strong>.<strong>createElement</strong>(<strong>component, props</strong>, ...children**)方法的语法糖</p>\n<p>\\3. 作用: 用来简化创建虚拟 DOM</p>\n<p>\\1) 写法：<strong>var**<strong>ele*</strong>*=**</strong><h1>********Hello JSX!</h1>**</p>\n<p>\\2) 注意 1：它不是字符串, 也不是 HTML/XML 标签</p>\n<p>\\3) 注意 2：它最终产生的就是一个 JS 对象</p>\n<p>\\4. 标签名任意: HTML 标签或其它标签</p>\n<p>\\5. 标签属性任意: HTML 标签属性或其它</p>\n<p>\\6. 基本语法规则</p>\n<p>\\1) 遇到 &lt;开头的代码, 以标签的语法解析: html 同名标签转换为 html 同名元素, 其它标签需要特别解析</p>\n<p>\\2) 遇到以 { 开头的代码，以 JS 语法解析: 标签中的 js 表达式必须用{ }包含</p>\n<p>\\7. babel.js 的作用</p>\n<p>\\1) 浏览器不能直接解析 JSX 代码, 需要 babel 转译为纯 JS 的代码才能运行</p>\n<p>\\2) 只要用了 JSX，都要加上 type=&quot;text/babel&quot;, 声明需要 babel 来处理</p>\n<h3 id=\"_1-3-3-渲染虚拟-dom-元素\"><a class=\"header-anchor\" href=\"#_1-3-3-渲染虚拟-dom-元素\">#</a> 1.3.3. 渲染虚拟 DOM(元素)</h3>\n<p>\\1. 语法: <strong>ReactDOM**</strong>.render(virtualDOM, ** <strong>containerDOM**</strong>)**</p>\n<p>\\2. 作用: 将虚拟 DOM 元素渲染到页面中的真实容器 DOM 中显示</p>\n<p>\\3. 参数说明</p>\n<p>\\1) 参数一: 纯 js 或 jsx 创建的虚拟 dom 对象</p>\n<p>\\2) 参数二: 用来包含虚拟 DOM 元素的真实 dom 元素对象(一般是一个 div)</p>\n<h4 id=\"元素渲染\"><a class=\"header-anchor\" href=\"#元素渲染\">#</a> 元素渲染</h4>\n<p>元素是构成 React 应用的最小砖块, 比如:</p>\n<p>const ele = <h1>hello, world</h1></p>\n<p>与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象。React DOM 会负责更新 DOM 来与 React 元素保持一致</p>\n<p>上节课的 ReactDOM.render()其实就是在渲染 DOM 节点</p>\n<h4 id=\"更新已渲染的元素\"><a class=\"header-anchor\" href=\"#更新已渲染的元素\">#</a> <strong>更新已渲染的元素</strong></h4>\n<p>React 元素是<strong>不可变对象</strong>, 一旦被创建, 无妨更改它的子元素或者属性</p>\n<p>计时器的例子</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>function tick() {   const element = (     &lt;div&gt;       &lt;h1&gt;Hello, world!&lt;/h1&gt;       &lt;h2&gt;{new Date().toLocaleTimeString()}.&lt;/h2&gt;     &lt;/div&gt;   );   ReactDOM.render(element, document.querySelector(&#39;#root&#39;)); } setInterval(tick, 1000);\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>大多数情况下, React 应用只会调用一次 ReactDOM.render()</p>\n<p><strong>React 只需要更新它需要更新的部分</strong></p>\n<p>React DOM 会将元素和它的子元素与它们之前的状态进行比较, 并只会进行必要的更新来使 DOM 达到预期的状态</p>\n<h4 id=\"循环绑定元素\"><a class=\"header-anchor\" href=\"#循环绑定元素\">#</a> 循环绑定元素</h4>\n<p>当数据从后端请求回来之后, 在 React 中, 一般都需要循环绑定元素</p>\n<h5 id=\"map-绑定\"><a class=\"header-anchor\" href=\"#map-绑定\">#</a> map 绑定</h5>\n<p>在 React 中, 循环绑定元素都是使用 map 方法, 不能使用 forEach 是因为 forEach 没有返回值</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>let ul = (&lt;ul&gt;   { arr.map((item, index)=&gt;{     return &lt;li key={index}&gt;{item}&lt;/li&gt;   }) } &lt;/ul&gt;)\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>结果会是一个 JSX 元素组成的数组，放入页面中，不会使用逗号分隔开。</p>\n<p>循环绑定的 JSX 元素，<strong>必须要有 key 属性</strong>，来区分不同的元素，否则会报错。</p>\n<h5 id=\"过滤元素\"><a class=\"header-anchor\" href=\"#过滤元素\">#</a> 过滤元素</h5>\n<p>同样通过 map 方法, 只要把不符合条件的元素, 返回为 null 即可, 原因在于, null 会被表示为空. 如果使用 filter, 那么就没有办法对元素进行处理, 只能过滤, 还是需要使用 map 进行处理</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>let ul = (&lt;ul&gt;   { arr.map((item, index)=&gt;{     return (       item.price &lt; 1000 ? null : &lt;li key={index}&gt;{item}&lt;/li&gt;;     )   }) } &lt;/ul&gt;)\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"_1-3-4-jsx-练习\"><a class=\"header-anchor\" href=\"#_1-3-4-jsx-练习\">#</a> 1.3.4. JSX 练习</h3>\n<p>需求: 动态展示如下列表</p>\n<h2 id=\"_1-4-模块与组件、模块化与组件化的理解\"><a class=\"header-anchor\" href=\"#_1-4-模块与组件、模块化与组件化的理解\">#</a> 1.4. 模块与组件、模块化与组件化的理解</h2>\n<h3 id=\"_1-4-1-模块\"><a class=\"header-anchor\" href=\"#_1-4-1-模块\">#</a> 1.4.1. 模块</h3>\n<p>\\1. 理解：向外提供特定功能的 js 程序, 一般就是一个 js 文件</p>\n<p>\\2. 为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</p>\n<p>\\3. 作用：复用 js, 简化 js 的编写, 提高 js 运行效率</p>\n<h3 id=\"_1-4-2-组件\"><a class=\"header-anchor\" href=\"#_1-4-2-组件\">#</a> 1.4.2. 组件</h3>\n<p>\\1. 理解：用来实现局部功能效果的代码和资源的集合(html/css/js/image 等等)</p>\n<p>\\2. 为什么要用组件： 一个界面的功能更复杂</p>\n<p>\\3. 作用：复用编码, 简化项目编码, 提高运行效率</p>\n<h3 id=\"_1-4-3-模块化\"><a class=\"header-anchor\" href=\"#_1-4-3-模块化\">#</a> 1.4.3. 模块化</h3>\n<p>当应用的 js 都以模块来编写的, 这个应用就是一个模块化的应用</p>\n<h3 id=\"_1-4-4-组件化\"><a class=\"header-anchor\" href=\"#_1-4-4-组件化\">#</a> 1.4.4. 组件化</h3>\n<p>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</p>\n<h1 id=\"第-2-章-react-面向组件编程\"><a class=\"header-anchor\" href=\"#第-2-章-react-面向组件编程\">#</a> 第 2 章：React 面向组件编程</h1>\n<h2 id=\"_2-1-基本理解和使用\"><a class=\"header-anchor\" href=\"#_2-1-基本理解和使用\">#</a> 2.1. 基本理解和使用</h2>\n<h3 id=\"_2-1-1-使用-react-开发者工具调试\"><a class=\"header-anchor\" href=\"#_2-1-1-使用-react-开发者工具调试\">#</a> 2.1.1. 使用 React 开发者工具调试</h3>\n<h3 id=\"_2-1-2-效果\"><a class=\"header-anchor\" href=\"#_2-1-2-效果\">#</a> 2.1.2. 效果</h3>\n<p>函数式组件：</p>\n<p>类式组件：</p>\n<h3 id=\"_2-1-3-注意\"><a class=\"header-anchor\" href=\"#_2-1-3-注意\">#</a> 2.1.3. 注意</h3>\n<p>\\1. 组件名必须首字母大写</p>\n<p>\\2. 虚拟 DOM 元素只能有一个根元素</p>\n<p>\\3. 虚拟 DOM 元素必须有结束标签</p>\n<h3 id=\"_2-1-4-渲染类组件标签的基本流程\"><a class=\"header-anchor\" href=\"#_2-1-4-渲染类组件标签的基本流程\">#</a> 2.1.4. 渲染类组件标签的基本流程</h3>\n<p>\\1. React 内部会创建组件实例对象</p>\n<p>\\2. 调用 render()得到虚拟 DOM, 并解析为真实 DOM</p>\n<p>\\3. 插入到指定的页面元素内部</p>\n<h2 id=\"_2-2-组件三大核心属性-1-state\"><a class=\"header-anchor\" href=\"#_2-2-组件三大核心属性-1-state\">#</a> 2.2. 组件三大核心属性 1: state</h2>\n<h3 id=\"_2-2-1-效果\"><a class=\"header-anchor\" href=\"#_2-2-1-效果\">#</a> 2.2.1. 效果</h3>\n<p><em>需求**😗*定义一个展示天气信息的组件</em>\n<em>1.<strong>默认展示天气炎热</strong>或**凉爽</em>\n<em>2. 点击文字切换天气</em></p>\n<h3 id=\"_2-2-2-理解\"><a class=\"header-anchor\" href=\"#_2-2-2-理解\">#</a> 2.2.2. 理解</h3>\n<p>\\1. state 是组件对象最重要的属性, 值是对象(可以包含多个 key-value 的组合)</p>\n<p>\\2. 组件被称为&quot;状态机&quot;, 通过更新组件的 state 来更新对应的页面显示(重新渲染组件)</p>\n<h3 id=\"_2-2-3-强烈注意\"><a class=\"header-anchor\" href=\"#_2-2-3-强烈注意\">#</a> 2.2.3. 强烈注意</h3>\n<p>\\1. 组件中 render 方法中的 this 为组件实例对象</p>\n<p>\\2. 组件自定义的方法中 this 为 undefined ，如何解决？</p>\n<p>a) 强制绑定 this: 通过函数对象的 bind()</p>\n<p>b) 赋值语句+箭头函数</p>\n<p>\\3. 状态数据，不能直接修改或更新，必须通过 this.setState 进行修改</p>\n<h3 id=\"_2-2-4-补充\"><a class=\"header-anchor\" href=\"#_2-2-4-补充\">#</a> 2.2.4 补充</h3>\n<h4 id=\"组件状态\"><a class=\"header-anchor\" href=\"#组件状态\">#</a> -组件状态</h4>\n<p>组件中数据的来源</p>\n<ul>\n<li>属性: 是由外接传递过来的</li>\n<li>状态: 是自己的, 只能通过 setState 来改变状态</li>\n</ul>\n<p>只有类声明的组件中, 才有状态</p>\n<h4 id=\"修改状态\"><a class=\"header-anchor\" href=\"#修改状态\">#</a> -修改状态</h4>\n<p>除了 constructor 之外的其它地方, 如果需要修改状态, 都只能通过 this.setState 方法</p>\n<p>这个方法传入的第一个参数, 可以是一个对象, 也可以是一个函数</p>\n<ul>\n<li>是一个对象，这个对象中包含需要改变的属性，它会与原有的状态进行合并</li>\n<li>是一个函数，接收第一个参数是 prevState，上一个状态对象，第二个参数是 props</li>\n</ul>\n<p>这个方法的第二个参数，是一个回调函数，在状态改变之后执行。</p>\n<p>如果下一个状态依赖于上一个状态，需要写成函数的方式</p>\n<h4 id=\"关于-setstate\"><a class=\"header-anchor\" href=\"#关于-setstate\">#</a> -关于 setState</h4>\n<ul>\n<li>在 react 组件的生命周期或事件的绑定中，setState 是异步的</li>\n<li>在定时器或原生的事件中，setState 不一定是异步的</li>\n</ul>\n<p>// state.count 当前为 0</p>\n<p>componentDidMount(){ this.setState({count: this.state.count + 1});</p>\n<p>console.log(this.state.count) } // 输出 0</p>\n<p>在元素渲染章节中，我们只了解了一种更新 UI 界面的方法。通过调用 ReactDOM.render() 来修改我们想要渲染的元素</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>function tick() {   const element = (     &lt;div&gt;       &lt;h1&gt;Hello, world!&lt;/h1&gt;       &lt;h2&gt;{new Date().toLocaleTimeString()}.&lt;/h2&gt;     &lt;/div&gt;   );   ReactDOM.render(element, document.querySelector(&#39;#root&#39;)); } setInterval(tick, 1000);\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>本节学习如何封装真正可复用的 Clock 组件</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span> <span class=\"token comment\">// 学习如何封装真正可复用的Clock组件。 class Clock extends Component {     constructor(props) {         super(props);         this.state = {             date: new Date().toLocaleString()         }     }     componentDidMount() {         this.timer = setInterval(() => {             // 注意1 不能直接修改state             // this.state.date = new Date(); //错误             // 注意2： setState()是异步的             this.setState({                 date: new Date().toLocaleString()             })         }, 1000);     }     componentWillUnmount() {         clearInterval(this.timer);     }     render() {         // 修改状态之后,会重新调用render         return (             &lt;div>                 &lt;h3>当前时间为:{this.state.date}&lt;/h3>             &lt;/div>         );     } } ReactDOM.render(&lt;Clock />, document.querySelector('#root'));</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"生命周期\"><a class=\"header-anchor\" href=\"#生命周期\">#</a> 生命周期</h3>\n<p>作者：前端开发小马哥\n链接：https://juejin.cn/post/6898512934100533261\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h2 id=\"_2-3-组件三大核心属性-2-props\"><a class=\"header-anchor\" href=\"#_2-3-组件三大核心属性-2-props\">#</a> 2.3. 组件三大核心属性 2: props</h2>\n<h3 id=\"_2-3-1-效果\"><a class=\"header-anchor\" href=\"#_2-3-1-效果\">#</a> 2.3.1. 效果</h3>\n<p><em>需求**😗*自定义用来显示一个人员信息的组件</em></p>\n<p><em>1.**姓名必须指定，且为字符串类型；</em></p>\n<p><em>2.**性别为字符串类型，如果性别没有指定，默认为男</em></p>\n<p><em>3.<strong>年龄为字符串类型，且为数字类型，默认值为</strong>18</em></p>\n<h3 id=\"_2-3-2-理解\"><a class=\"header-anchor\" href=\"#_2-3-2-理解\">#</a> 2.3.2. 理解</h3>\n<p>\\1. 每个组件对象都会有 props(properties 的简写)属性</p>\n<p>\\2. 组件标签的所有属性都保存在 props 中</p>\n<h3 id=\"_2-3-3-作用\"><a class=\"header-anchor\" href=\"#_2-3-3-作用\">#</a> 2.3.3. 作用</h3>\n<p>\\1. 通过标签属性从组件外向组件内传递变化的数据</p>\n<p>\\2. 注意: 组件内部不要修改 props 数据</p>\n<h3 id=\"_2-3-4-编码操作\"><a class=\"header-anchor\" href=\"#_2-3-4-编码操作\">#</a> 2.3.4. 编码操作</h3>\n<p>\\1. 内部读取某个属性值</p>\n<p><strong>this</strong>.<strong>props</strong>.<strong>name</strong></p>\n<p>\\2. 对 props 中的属性值进行类型限制和必要性限制</p>\n<p>第一种方式（React v15.5 开始已弃用）：</p>\n<p><em>Person</em>.<strong>propTypes</strong> = { <strong>name</strong>: <strong>React</strong>.<strong>PropTypes</strong>.<strong>string</strong>.isRequired, <strong>age</strong>: <strong>React</strong>.<strong>PropTypes</strong>.<strong>number</strong> }</p>\n<p>第二种方式（新）：使用 prop-types 库进限制（需要引入 prop-types 库）</p>\n<p><em>Person</em>.<strong>propTypes</strong> = { <strong>name</strong>: <strong>PropTypes</strong>.<strong>string</strong>.isRequired, <strong>age</strong>: <strong>PropTypes</strong>.<strong>number</strong>. }</p>\n<p>\\3. 扩展属性: 将对象的所有属性通过 props 传递</p>\n<p>&lt;<strong>Person</strong> {...<strong>*person</strong>*****}/&gt;</p>\n<p>\\4. 默认属性值：</p>\n<p>Person.<strong>defaultProps</strong> = { <strong>age</strong>: 18, <strong>sex</strong>😗*'****男' ** }</p>\n<p>\\5.</p>\n<p><strong>constructor</strong>(props){ <strong>super</strong>(props) <strong>console</strong>.log(props)_//<strong>打印所有属性</strong> _ }</p>\n<p>组件类的构造函数</p>\n<h2 id=\"_2-4-组件三大核心属性-3-refs-与事件处理\"><a class=\"header-anchor\" href=\"#_2-4-组件三大核心属性-3-refs-与事件处理\">#</a> 2.4. 组件三大核心属性 3: refs 与事件处理</h2>\n<h3 id=\"_2-4-1-效果\"><a class=\"header-anchor\" href=\"#_2-4-1-效果\">#</a> 2.4.1. 效果</h3>\n<p><em>需求**:<strong>自定义组件</strong>, **功能说明如下**:</em></p>\n<p><em>1.<strong>点击按钮</strong>, **提示第一个输入框中的值</em></p>\n<p>*2.<strong>当第**<strong>2*</strong>*个输入框失去焦点时</strong>, *<em>提示这个输入框中的值</em></p>\n<p>效果如下：</p>\n<h3 id=\"_2-4-2-理解\"><a class=\"header-anchor\" href=\"#_2-4-2-理解\">#</a> 2.4.2. 理解</h3>\n<p>组件内的标签可以定义 ref 属性来标识自己，相当于原生 id，可以通过 this.refs. XX 获取数据</p>\n<h3 id=\"_2-4-3-编码\"><a class=\"header-anchor\" href=\"#_2-4-3-编码\">#</a> 2.4.3. 编码</h3>\n<p>\\1. 字符串形式的 ref</p>\n<p><strong>&lt;input**<strong>ref*</strong>*=&quot;input1&quot;/&gt;</strong></p>\n<p>\\2. 回调形式的 ref</p>\n<p><strong>&lt;input**<strong>ref*</strong>*={(c)=&gt;{this.input1</strong> <strong>=**<strong>c*</strong>*}}/&gt;</strong></p>\n<p>\\3. createRef 创建 ref 容器·</p>\n<p><strong>myRef**</strong>=*<strong>*React**</strong>.createRef()** <strong>&lt;input**<strong>ref*</strong>*={this.myRef}/&gt;</strong></p>\n<h3 id=\"_2-4-4-事件处理\"><a class=\"header-anchor\" href=\"#_2-4-4-事件处理\">#</a> 2.4.4. 事件处理</h3>\n<p>\\1. 通过 onXxx 属性指定事件处理函数(注意大小写)</p>\n<p>\\1) React 使用的是自定义(合成)事件, 而不是使用的原生 DOM 事件</p>\n<p>\\2) React 中的事件是通过事件委托方式处理的(委托给组件最外层的元素)</p>\n<p>\\2. 通过 event.target 得到发生事件的 DOM 元素对象</p>\n<h2 id=\"_2-5-收集表单数据\"><a class=\"header-anchor\" href=\"#_2-5-收集表单数据\">#</a> 2.5. 收集表单数据</h2>\n<h3 id=\"_2-5-1-效果\"><a class=\"header-anchor\" href=\"#_2-5-1-效果\">#</a> 2.5.1. 效果</h3>\n<p><em>需求**😗*定义一个包含表单的组件</em></p>\n<p><em>输入用户名密码后**, **点击登录提示输入信息</em></p>\n<h3 id=\"_2-5-2-理解\"><a class=\"header-anchor\" href=\"#_2-5-2-理解\">#</a> 2.5.2. 理解</h3>\n<p>包含表单的组件分类</p>\n<p>\\1. 受控组件</p>\n<p>\\2. 非受控组件</p>\n<h2 id=\"_2-6-组件的生命周期\"><a class=\"header-anchor\" href=\"#_2-6-组件的生命周期\">#</a> 2.6. 组件的生命周期</h2>\n<h3 id=\"_2-6-1-效果\"><a class=\"header-anchor\" href=\"#_2-6-1-效果\">#</a> 2.6.1. 效果</h3>\n<p>*需求****😗***定义组件实现以下功能：*</p>\n<p><em>1.<strong>让指定的文本做显示</strong>/**隐藏的渐变动画</em></p>\n<p><em>2.<strong>从完全可见，到彻底消失，耗时</strong>2S</em></p>\n<p><em>3.**点击“不活了”按钮从界面中卸载组件</em></p>\n<h3 id=\"_2-6-2-理解\"><a class=\"header-anchor\" href=\"#_2-6-2-理解\">#</a> 2.6.2. 理解</h3>\n<p>\\1. 组件从创建到死亡它会经历一些特定的阶段。</p>\n<p>\\2. React 组件中包含一系列勾子函数(生命周期回调函数), 会在特定的时刻调用。</p>\n<p>\\3. 我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作。</p>\n<h3 id=\"_2-6-3-生命周期流程图-旧\"><a class=\"header-anchor\" href=\"#_2-6-3-生命周期流程图-旧\">#</a> 2.6.3. 生命周期流程图(旧)</h3>\n<p>不想对状态进行更改：强制更新 forceUpdate()</p>\n<p>正常更新：setState()</p>\n<p>父组件 render:</p>\n<p><strong>render</strong>(){</p>\n<p>return(</p>\n<p>我是 A 组件</p>\n<p>换车</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">B</span></span> <span class=\"token attr-name\">carName</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n<p>)</p>\n<p>}</p>\n<p><strong>生命周期的三个阶段（旧）</strong></p>\n<p>\\1. 初始化阶段: 由 ReactDOM.render()触发---初次渲染</p>\n<p>\\1. constructor()</p>\n<p>\\2. componentWillMount()</p>\n<p>\\3. render()</p>\n<p>\\4. componentDidMount() =====&gt; 常用</p>\n<p>一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</p>\n<p>\\2. 更新阶段: 由组件内部 this.setSate()或父组件 render 触发</p>\n<p>\\1. shouldComponentUpdate()</p>\n<p>\\2. componentWillUpdate()</p>\n<p>\\3. render() =====&gt; 必须使用的一个</p>\n<p>\\4. componentDidUpdate()</p>\n<p>\\3. 卸载组件: 由 ReactDOM.unmountComponentAtNode()触发</p>\n<p>\\1. componentWillUnmount() =====&gt; 常用</p>\n<p>一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</p>\n<h3 id=\"_2-6-4-生命周期流程图-新\"><a class=\"header-anchor\" href=\"#_2-6-4-生命周期流程图-新\">#</a> 2.6.4. 生命周期流程图(新)</h3>\n<p>生命周期的三个阶段（新）</p>\n<p>**1.****初始化阶段:** 由 ReactDOM.render()触发---初次渲染</p>\n<p>\\1. constructor()</p>\n<p><strong>2.**<strong>getDerivedStateFromProps =&gt;*</strong>*返回状态对象或者 null，能收到参数</strong> <strong>props**</strong>，适用于在 state 值在任何时候都取决于 props, 那么可以使用 getDerivedStateFromProps**</p>\n<p>\\3. render()</p>\n<p>\\4. componentDidMount() =&gt;一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</p>\n<p>\\5.</p>\n<p>**2.****更新阶段:** 由组件内部 this.setSate()或父组件重新 render 触发</p>\n<p>**1.****getDerivedStateFromProps**</p>\n<p>\\2. shouldComponentUpdate()</p>\n<p>\\3. render()</p>\n<p><strong>4.**<strong>getSnapshotBeforeUpdate //*</strong>*在更新之前获取快照，在发生更改前获取 DOM 信息</strong></p>\n<p>\\5. componentDidUpdate()</p>\n<p>**3.****卸载组件:** 由 ReactDOM.unmountComponentAtNode()触发</p>\n<p>\\1. componentWillUnmount() =====&gt; 常用</p>\n<p>一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</p>\n<h3 id=\"_2-6-5-重要的勾子\"><a class=\"header-anchor\" href=\"#_2-6-5-重要的勾子\">#</a> 2.6.5. 重要的勾子</h3>\n<p>\\1. render：初始化渲染或更新渲染调用</p>\n<p>\\2. componentDidMount：开启监听, 发送 ajax 请求</p>\n<p>\\3. componentWillUnmount：做一些收尾工作, 如: 清理定时器</p>\n<h3 id=\"_2-6-6-即将废弃的勾子\"><a class=\"header-anchor\" href=\"#_2-6-6-即将废弃的勾子\">#</a> 2.6.6. 即将废弃的勾子</h3>\n<p>\\1. componentWillMount</p>\n<p>\\2. componentWillReceiveProps</p>\n<p>\\3. componentWillUpdate</p>\n<p>现在使用会出现警告，下一个大版本需要加上 UNSAFE_前缀才能使用，以后可能会被彻底废弃，不建议使用。</p>\n<h2 id=\"_2-7-虚拟-dom-与-dom-diffing-算法\"><a class=\"header-anchor\" href=\"#_2-7-虚拟-dom-与-dom-diffing-算法\">#</a> 2.7. 虚拟 DOM 与 DOM Diffing 算法</h2>\n<h3 id=\"_2-7-1-效果\"><a class=\"header-anchor\" href=\"#_2-7-1-效果\">#</a> 2.7.1. 效果</h3>\n<p>*需求：验证虚拟****DOM Diffing****算法的存在*</p>\n<h3 id=\"_2-7-2-基本原理图\"><a class=\"header-anchor\" href=\"#_2-7-2-基本原理图\">#</a> 2.7.2. 基本原理图</h3>\n<h1 id=\"第-3-章-react-应用-基于-react-脚手架\"><a class=\"header-anchor\" href=\"#第-3-章-react-应用-基于-react-脚手架\">#</a> 第 3 章：React 应用(基于 React 脚手架)</h1>\n<h2 id=\"_3-1-使用-create-react-app-创建-react-应用\"><a class=\"header-anchor\" href=\"#_3-1-使用-create-react-app-创建-react-应用\">#</a> 3.1. 使用 create-react-app 创建 react 应用</h2>\n<h3 id=\"_3-1-1-react-脚手架\"><a class=\"header-anchor\" href=\"#_3-1-1-react-脚手架\">#</a> 3.1.1. react 脚手架</h3>\n<p>\\1. xxx 脚手架: 用来帮助程序员快速创建一个基于 xxx 库的模板项目</p>\n<p>\\1. 包含了所有需要的配置（语法检查、jsx 编译、devServer…）</p>\n<p>\\2. 下载好了所有相关的依赖</p>\n<p>\\3. 可以直接运行一个简单效果</p>\n<p>\\2. react 提供了一个用于创建 react 项目的脚手架库: create-react-app</p>\n<p>\\3. 项目的整体技术架构为: react + webpack + es6 + eslint</p>\n<p>\\4. 使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</p>\n<h3 id=\"_3-1-2-创建项目并启动\"><a class=\"header-anchor\" href=\"#_3-1-2-创建项目并启动\">#</a> 3.1.2. 创建项目并启动</h3>\n<p><strong>第一步</strong>，全局安装：npm i -g create-react-app</p>\n<p><strong>第二步</strong>，切换到想创项目的目录，使用命令：create-react-app hello-react</p>\n<p><strong>第三步</strong>，进入项目文件夹：cd hello-react</p>\n<p><strong>第四步</strong>，启动项目：npm start</p>\n<h3 id=\"_3-1-3-react-脚手架项目结构\"><a class=\"header-anchor\" href=\"#_3-1-3-react-脚手架项目结构\">#</a> 3.1.3. react 脚手架项目结构</h3>\n<p>public ---- 静态资源文件夹</p>\n<p>favicon.icon ------ 网站页签图标</p>\n<p>**index.html --------****主页面, 只有一个 html 文件**</p>\n<p>logo192.png ------- logo 图</p>\n<p>logo512.png ------- logo 图</p>\n<p>manifest.json ----- 应用加壳的配置文件</p>\n<p>robots.txt -------- 爬虫协议文件</p>\n<p>src ---- 源码文件夹</p>\n<p>App.css -------- App 组件的样式</p>\n<p>**App.js --------- App****组件，所有应用的外壳组件**</p>\n<p>App.test.js ---- 用于给 App 做测试</p>\n<p>index.css ------ 样式，组件引入，渲染 index.html 中定义的容器</p>\n<p>使用&lt;React. StrictMode&gt;&lt;/ React. StrictMode&gt;检查</p>\n<p>**index.js -------****入口文件**</p>\n<p>logo.svg ------- logo 图</p>\n<p>reportWebVitals.js</p>\n<p>--- 页面性能分析文件(需要 web-vitals 库的支持)记录页面上的性能，web-vital 库进行性能分析</p>\n<p>setupTests.js</p>\n<p>---- 组件单元测试的文件(需要 jest-dom 库的支持)</p>\n<p>%PIBLIC_URL%代表 public 文件夹的路径</p>\n<h3 id=\"rcc-类式组件\"><a class=\"header-anchor\" href=\"#rcc-类式组件\">#</a> Rcc: 类式组件</h3>\n<p>Rfc：函数式组件</p>\n<h3 id=\"_3-1-4-功能界面的组件化编码流程-通用\"><a class=\"header-anchor\" href=\"#_3-1-4-功能界面的组件化编码流程-通用\">#</a> 3.1.4. 功能界面的组件化编码流程（通用）</h3>\n<p>\\1. 拆分组件: 拆分界面, 抽取组件</p>\n<p>\\2. 实现静态组件: 使用组件实现静态页面效果</p>\n<p>\\3. 实现动态组件</p>\n<p>3.1 动态显示初始化数据</p>\n<p>状态放在哪里？</p>\n<p>3.1.1 数据类型</p>\n<p>3.1.2 数据名称</p>\n<p>3.1.2 保存在哪个组件?</p>\n<p>3.2 交互(从绑定事件监听开始)</p>\n<h2 id=\"_3-2-组件的组合使用-todolist\"><a class=\"header-anchor\" href=\"#_3-2-组件的组合使用-todolist\">#</a> 3.2. 组件的组合使用-TodoList</h2>\n<p><em>功能**😗*组件化实现此功能</em></p>\n<p>*1.**显示所有****todo*<em>**列表</em></p>\n<p><em>2.<strong>输入文本</strong>, <strong>点击按钮显示到列表的首位</strong>, **并清除输入的文本</em></p>\n<p>reactDOM.render 之执行一次</p>\n<p>index.html=&gt;index.js(App.js 页面展现在页面)=&gt;App.js</p>\n<p>子给父传递信息：夫给子传递一个函数 用 props 传递</p>\n<p>安装 nanoid</p>\n<p>npm i nanoid</p>\n<p>nanoid 是一个函数，每一次生成的时候都会生成一个字符串，并且可以保证是唯一的</p>\n<h1 id=\"第-4-章-react-ajax\"><a class=\"header-anchor\" href=\"#第-4-章-react-ajax\">#</a> 第 4 章：React ajax</h1>\n<h2 id=\"react-ajax-理解\"><a class=\"header-anchor\" href=\"#react-ajax-理解\">#</a> React ajax 理解</h2>\n<h3 id=\"_4-1-1-前置说明\"><a class=\"header-anchor\" href=\"#_4-1-1-前置说明\">#</a> 4.1.1. 前置说明</h3>\n<p>\\1. React 本身只关注于界面, 并不包含发送 ajax 请求的代码</p>\n<p>\\2. 前端应用需要通过 ajax 请求与后台进行交互(json 数据)</p>\n<p>\\3. react 应用中需要集成第三方 ajax 库(或自己封装)</p>\n<h3 id=\"_4-1-2-常用的-ajax-请求库\"><a class=\"header-anchor\" href=\"#_4-1-2-常用的-ajax-请求库\">#</a> 4.1.2. 常用的 ajax 请求库</h3>\n<p>\\1. jQuery: 比较重, 如果需要另外引入不建议使用</p>\n<p>\\2. axios: 轻量级, 建议使用</p>\n<p>\\1) 封装 XmlHttpRequest 对象的 ajax</p>\n<p>\\2) promise 风格</p>\n<p>\\3) 可以用在浏览器端和 node 服务器端</p>\n<h2 id=\"_4-2-axios\"><a class=\"header-anchor\" href=\"#_4-2-axios\">#</a> 4.2. axios</h2>\n<h3 id=\"_4-2-1-文档\"><a class=\"header-anchor\" href=\"#_4-2-1-文档\">#</a> 4.2.1. 文档</h3>\n<p>https://github.com/axios/axios</p>\n<h3 id=\"_4-2-2-相关-api\"><a class=\"header-anchor\" href=\"#_4-2-2-相关-api\">#</a> 4.2.2. 相关 API</h3>\n<p>\\1) GET 请求</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>axios.get(&#39;/user?ID=12345&#39;) .then(function (response) {   console.log(response.data); }) .catch(function (error) { console.log(error); }); axios.get(&#39;/user&#39;, { params: { ID: 12345 } }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); });\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>\\2) POST 请求</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>axios.post(&#39;/user&#39;, { firstName: &#39;Fred&#39;, lastName: &#39;Flintstone&#39; }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); });\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_4-3-案例-github-用户搜索\"><a class=\"header-anchor\" href=\"#_4-3-案例-github-用户搜索\">#</a> 4.3. 案例—github 用户搜索</h2>\n<h3 id=\"_4-3-1-效果\"><a class=\"header-anchor\" href=\"#_4-3-1-效果\">#</a> 4.3.1. 效果</h3>\n<p>请求地址: https://api.github.com/search/users?q=xxxxxx</p>\n<h2 id=\"_4-4-消息订阅-发布机制\"><a class=\"header-anchor\" href=\"#_4-4-消息订阅-发布机制\">#</a> 4.4. 消息订阅-发布机制</h2>\n<p>\\1. 工具库: PubSubJS</p>\n<p>\\2. 下载: npm install pubsub-js --save</p>\n<p>\\3. 使用:</p>\n<p>\\1) import PubSub from 'pubsub-js' //引入</p>\n<p>\\2) PubSub.subscribe('delete', function(data){ }); //订阅</p>\n<p>\\3) PubSub.publish('delete', data) //发布消息</p>\n<h2 id=\"_4-5-扩展-fetch\"><a class=\"header-anchor\" href=\"#_4-5-扩展-fetch\">#</a> 4.5. 扩展：Fetch</h2>\n<h3 id=\"_4-5-1-文档\"><a class=\"header-anchor\" href=\"#_4-5-1-文档\">#</a> 4.5.1. 文档</h3>\n<p>\\1. https://github.github.io/fetch/</p>\n<p>\\2. https://segmentfault.com/a/1190000003810652</p>\n<h3 id=\"_4-5-2-特点\"><a class=\"header-anchor\" href=\"#_4-5-2-特点\">#</a> 4.5.2. 特点</h3>\n<p>\\1. fetch: 原生函数，不再使用 XmlHttpRequest 对象提交 ajax 请求</p>\n<p>\\2. 老版本浏览器可能不支持</p>\n<h3 id=\"_4-5-3-相关-api\"><a class=\"header-anchor\" href=\"#_4-5-3-相关-api\">#</a> 4.5.3. 相关 API</h3>\n<p>\\1) GET 请求</p>\n<p>fetch(url).then(function(response) { return response.json() }).then(function(data) { console.log(data) }).catch(function(e) { console.log(e) });</p>\n<p>\\2) POST 请求</p>\n<p>fetch(url, { method: &quot;POST&quot;, body: JSON.stringify(data), }).then(function(data) { console.log(data) }).catch(function(e) { console.log(e) })</p>\n<h1 id=\"第-5-章-react-路由\"><a class=\"header-anchor\" href=\"#第-5-章-react-路由\">#</a> 第 5 章：React 路由</h1>\n<h1 id=\"第-6-章-react-ui-组件库\"><a class=\"header-anchor\" href=\"#第-6-章-react-ui-组件库\">#</a> 第 6 章：React UI 组件库</h1>\n<h2 id=\"_6-1-流行的开源-react-ui-组件库\"><a class=\"header-anchor\" href=\"#_6-1-流行的开源-react-ui-组件库\">#</a> 6.1. 流行的开源 React UI 组件库</h2>\n<h3 id=\"_6-1-1-material-ui-国外\"><a class=\"header-anchor\" href=\"#_6-1-1-material-ui-国外\">#</a> 6.1.1. material-ui(国外)</h3>\n<p>\\1. 官网: http://www.material-ui.com/#/</p>\n<p>\\2. github: https://github.com/callemall/material-ui</p>\n<h3 id=\"_6-1-2-ant-design-国内蚂蚁金服\"><a class=\"header-anchor\" href=\"#_6-1-2-ant-design-国内蚂蚁金服\">#</a> 6.1.2. ant-design(国内蚂蚁金服)</h3>\n<p>\\1. 官网: https://ant.design/index-cn</p>\n<p>\\2. Github: https://github.com/ant-design/ant-design/</p>\n<h1 id=\"第-7-章-redux\"><a class=\"header-anchor\" href=\"#第-7-章-redux\">#</a> 第 7 章：redux</h1>\n<h2 id=\"_7-1-redux-理解\"><a class=\"header-anchor\" href=\"#_7-1-redux-理解\">#</a> 7.1. redux 理解</h2>\n<h3 id=\"_7-1-1-学习文档\"><a class=\"header-anchor\" href=\"#_7-1-1-学习文档\">#</a> 7.1.1. 学习文档</h3>\n<p>\\1. 英文文档: https://redux.js.org/</p>\n<p>\\2. 中文文档: http://www.redux.org.cn/</p>\n<p>\\3. Github: https://github.com/reactjs/redux</p>\n<h3 id=\"_7-1-2-redux-是什么\"><a class=\"header-anchor\" href=\"#_7-1-2-redux-是什么\">#</a> 7.1.2. redux 是什么</h3>\n<p>\\1. redux 是一个专门用于做<strong>状态管理</strong>的 JS 库(不是 react 插件库)。</p>\n<p>\\2. 它可以用在 react, angular, vue 等项目中, 但基本与 react 配合使用。</p>\n<p>\\3. 作用: 集中式管理 react 应用中多个组件<strong>共享</strong>的状态。</p>\n<h3 id=\"_7-1-3-什么情况下需要使用-redux\"><a class=\"header-anchor\" href=\"#_7-1-3-什么情况下需要使用-redux\">#</a> 7.1.3. 什么情况下需要使用 redux</h3>\n<p>\\1. 某个组件的状态，需要让其他组件可以随时拿到（共享）。</p>\n<p>\\2. 一个组件需要改变另一个组件的状态（通信）。</p>\n<p>\\3. 总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</p>\n<h3 id=\"_7-1-4-redux-工作流程\"><a class=\"header-anchor\" href=\"#_7-1-4-redux-工作流程\">#</a> 7.1.4. redux 工作流程</h3>\n<h2 id=\"_7-2-redux-的三个核心概念\"><a class=\"header-anchor\" href=\"#_7-2-redux-的三个核心概念\">#</a> 7.2. redux 的三个核心概念</h2>\n<h3 id=\"_7-2-1-action\"><a class=\"header-anchor\" href=\"#_7-2-1-action\">#</a> 7.2.1. action</h3>\n<p>\\1. 动作的对象</p>\n<p>\\2. 包含 2 个属性</p>\n<p>l type：标识属性, 值为字符串, 唯一, 必要属性</p>\n<p>l data：数据属性, 值类型任意, 可选属性</p>\n<p>\\3. 例子：{ type: 'ADD_STUDENT', data:{name: 'tom', age:18} }</p>\n<h3 id=\"_7-2-2-reducer\"><a class=\"header-anchor\" href=\"#_7-2-2-reducer\">#</a> 7.2.2. reducer</h3>\n<p>\\1. 用于初始化状态、加工状态。</p>\n<p>\\2. 加工时，根据旧的 state 和 action， 产生新的 state 的<strong>纯函数**</strong>。**</p>\n<h3 id=\"_7-2-3-store\"><a class=\"header-anchor\" href=\"#_7-2-3-store\">#</a> 7.2.3. store</h3>\n<p>\\1. 将 state、action、reducer 联系在一起的对象</p>\n<p>\\2. 如何得到此对象?</p>\n<p>\\1) import {createStore} from 'redux'</p>\n<p>\\2) import reducer from './reducers'</p>\n<p>\\3) const store = createStore(reducer)</p>\n<p>\\3. 此对象的功能?</p>\n<p>\\1) getState(): 得到 state</p>\n<p>\\2) dispatch(action): 分发 action, 触发 reducer 调用, 产生新的 state</p>\n<p>\\3) subscribe(listener): 注册监听, 当产生了新的 state 时, 自动调用</p>\n<h2 id=\"_7-3-redux-的核心-api\"><a class=\"header-anchor\" href=\"#_7-3-redux-的核心-api\">#</a> 7.3. redux 的核心 API</h2>\n<h3 id=\"_7-3-1-createstore\"><a class=\"header-anchor\" href=\"#_7-3-1-createstore\">#</a> 7.3.1. createstore()</h3>\n<p>作用：创建包含指定 reducer 的 store 对象</p>\n<h3 id=\"_7-3-2-store-对象\"><a class=\"header-anchor\" href=\"#_7-3-2-store-对象\">#</a> 7.3.2. store 对象</h3>\n<p>\\1. 作用: redux 库最核心的管理对象</p>\n<p>\\2. 它内部维护着:</p>\n<p>\\1) state</p>\n<p>\\2) reducer</p>\n<p>\\3. 核心方法:</p>\n<p>\\1) getState()</p>\n<p>\\2) dispatch(action)</p>\n<p>\\3) subscribe(listener)</p>\n<p>\\4. 具体编码:</p>\n<p>\\1) store.getState()</p>\n<p>\\2) store.dispatch({type:'INCREMENT', number})</p>\n<p>\\3) store.subscribe(render)</p>\n<h3 id=\"_7-3-3-applymiddleware\"><a class=\"header-anchor\" href=\"#_7-3-3-applymiddleware\">#</a> 7.3.3. applyMiddleware()</h3>\n<p>作用：应用上基于 redux 的中间件(插件库)</p>\n<h3 id=\"_7-3-4-combinereducers\"><a class=\"header-anchor\" href=\"#_7-3-4-combinereducers\">#</a> 7.3.4. combineReducers()</h3>\n<p>作用：合并多个 reducer 函数</p>\n<h2 id=\"_7-4-使用-redux-编写应用\"><a class=\"header-anchor\" href=\"#_7-4-使用-redux-编写应用\">#</a> 7.4. 使用 redux 编写应用</h2>\n<p><strong>效果</strong></p>\n<h2 id=\"_7-5-redux-异步编程\"><a class=\"header-anchor\" href=\"#_7-5-redux-异步编程\">#</a> 7.5. redux 异步编程</h2>\n<h3 id=\"_7-5-1-理解\"><a class=\"header-anchor\" href=\"#_7-5-1-理解\">#</a> 7.5.1 理解：</h3>\n<p>\\1. redux 默认是不能进行异步处理的,</p>\n<p>\\2. 某些时候应用中需要在**redux****中执行异步任务**(ajax, 定时器)</p>\n<h3 id=\"_7-5-2-使用异步中间件\"><a class=\"header-anchor\" href=\"#_7-5-2-使用异步中间件\">#</a> 7.5.2. 使用异步中间件</h3>\n<p>npm install --save redux-thunk</p>\n<h2 id=\"_7-6-react-redux\"><a class=\"header-anchor\" href=\"#_7-6-react-redux\">#</a> 7.6. react-redux</h2>\n<h3 id=\"_7-6-1-理解\"><a class=\"header-anchor\" href=\"#_7-6-1-理解\">#</a> 7.6.1. 理解</h3>\n<p>\\1. 一个 react 插件库</p>\n<p>\\2. 专门用来简化 react 应用中使用 redux</p>\n<h3 id=\"_7-6-2-react-redux-将所有组件分成两大类\"><a class=\"header-anchor\" href=\"#_7-6-2-react-redux-将所有组件分成两大类\">#</a> 7.6.2. react-Redux 将所有组件分成两大类</h3>\n<p>\\1. UI 组件</p>\n<p>\\1) 只负责 UI 的呈现，不带有任何业务逻辑</p>\n<p>\\2) 通过 props 接收数据(一般数据和函数)</p>\n<p>\\3) 不使用任何 Redux 的 API</p>\n<p>\\4) 一般保存在 components 文件夹下</p>\n<p>\\2. 容器组件</p>\n<p>\\1) 负责管理数据和业务逻辑，不负责 UI 的呈现</p>\n<p>\\2) 使用 Redux 的 API</p>\n<p>\\3) 一般保存在 containers 文件夹下</p>\n<h3 id=\"_7-6-3-相关-api\"><a class=\"header-anchor\" href=\"#_7-6-3-相关-api\">#</a> 7.6.3. 相关 API</h3>\n<p>\\1. Provider：让所有组件都可以得到 state 数据</p>\n<p>**&lt;**Provider <strong>store</strong> ={store}&gt; **&lt;**App **/&gt;&lt;/**Provider&gt;</p>\n<p>\\2. connect：用于包装 UI 组件生成容器组件</p>\n<p><strong>import{connect}from'react-redux'connect</strong>( <strong>mapStateToprops</strong>, **mapDispatchToProps)(**Counter)</p>\n<p>\\3. mapStateToprops：将外部的数据（即 state 对象）转换为 UI 组件的标签属性</p>\n<p>**constmapStateToprops=function(**state) { <strong>return{value:state}}</strong></p>\n<p>\\4. mapDispatchToProps：将分发 action 的函数转换为 UI 组件的标签属性</p>\n<h2 id=\"_7-7-使用上-redux-调试工具\"><a class=\"header-anchor\" href=\"#_7-7-使用上-redux-调试工具\">#</a> 7.7. 使用上 redux 调试工具</h2>\n<h3 id=\"_7-7-1-安装-chrome-浏览器插件\"><a class=\"header-anchor\" href=\"#_7-7-1-安装-chrome-浏览器插件\">#</a> 7.7.1. 安装 chrome 浏览器插件</h3>\n<h3 id=\"_7-7-2-下载工具依赖包\"><a class=\"header-anchor\" href=\"#_7-7-2-下载工具依赖包\">#</a> 7.7.2. 下载工具依赖包</h3>\n<p>npm install --save-dev redux-devtools-extension</p>\n<h2 id=\"_7-8-纯函数和高阶函数\"><a class=\"header-anchor\" href=\"#_7-8-纯函数和高阶函数\">#</a> 7.8. 纯函数和高阶函数</h2>\n<h3 id=\"_7-8-1-纯函数\"><a class=\"header-anchor\" href=\"#_7-8-1-纯函数\">#</a> 7.8.1. 纯函数</h3>\n<p>\\1. 一类特别的函数: 只要是同样的输入(实参)，必定得到同样的输出(返回)</p>\n<p>\\2. 必须遵守以下一些约束</p>\n<p>\\1) 不得改写参数数据</p>\n<p>\\2) 不会产生任何副作用，例如网络请求，输入和输出设备</p>\n<p>\\3) 不能调用 Date.now()或者 Math.random()等不纯的方法</p>\n<p>\\3. redux 的 reducer 函数必须是一个纯函数</p>\n<h3 id=\"_7-8-2-高阶函数\"><a class=\"header-anchor\" href=\"#_7-8-2-高阶函数\">#</a> 7.8.2. 高阶函数</h3>\n<p>\\1. 理解: 一类特别的函数</p>\n<p>\\1) 情况 1: 参数是函数</p>\n<p>\\2) 情况 2: 返回是函数</p>\n<p>\\2. 常见的高阶函数:</p>\n<p>\\1) 定时器设置函数</p>\n<p>\\2) 数组的 forEach()/map()/filter()/reduce()/find()/bind()</p>\n<p>\\3) promise</p>\n<p>\\4) react-redux 中的 connect 函数</p>\n<p>\\3. 作用: 能实现更加动态, 更加可扩展的功能 babel➕ 运算符{...}. 只能适用于标签属性传递</p>\n<p>构造器是否接收 props，是否传递给 super，取决于：是否希望在构造器中通过 this 访问 props</p>\n<p>必须要将一个函数作为事件的回调</p>\n<p>render 在每次挂载的时候调用 （调用 1+n 次）</p>\n<p>经典面试题:</p>\n<p>1). react/vue 中的 key 有什么作用？（key 的内部原理是什么？）</p>\n<p>2). 为什么遍历列表时，key 最好不要用 index?</p>\n<p>\\1. 虚拟 DOM 中 key 的作用：有没有渲染，渲染过就直接使用</p>\n<p>1). 简单的说: key 是虚拟 DOM 对象的标识, 在更新显示时 key 起着极其重要的作用。</p>\n<p>2). 详细的说: 当状态中的数据发生变化时，react 会根据【新数据】生成【新的虚拟 DOM】,</p>\n<p>随后 React 进行【新虚拟 DOM】与【旧虚拟 DOM】的 diff 比较，比较规则如下：</p>\n<p>a. 旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：</p>\n<p>(1). 若虚拟 DOM 中内容没变, 直接使用之前的真实 DOM</p>\n<p>(2). 若虚拟 DOM 中内容变了, 则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</p>\n<p>b. 旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key</p>\n<p>根据数据创建新的真实 DOM，随后渲染到到页面</p>\n<p>\\2. 用 index 作为 key 可能会引发的问题：</p>\n<p>\\1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p>\n<p>会产生没有必要的真实 DOM 更新 ==&gt; 界面效果没问题, 但效率低。</p>\n<p>\\2. 如果结构中还包含输入类的 DOM：</p>\n<p>会产生错误 DOM 更新 ==&gt; 界面有问题。</p>\n<p>\\3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</p>\n<p>仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</p>\n<p>\\3. 开发中如何选择 key?:</p>\n<ol>\n<li>\n<p>最好使用每条数据的唯一标识作为 key, 比如 id、手机号、身份证号、学号等唯一值。</p>\n</li>\n<li>\n<p>如果确定只是简单的展示数据，用 index 也是可以的。</p>\n</li>\n</ol>\n<p>*/</p>\n<p>/*</p>\n<p>慢动作回放----使用 index 索引值作为 key</p>\n<p>初始数据：</p>\n<p>{id:1, name:'小张', age:18},</p>\n<p>{id:2, name:'小李', age:19},</p>\n<p>初始的虚拟 DOM：</p>\n<li key=0>小张---18<input type=\"text\"/></li>\n<li key=1>小李---19<input type=\"text\"/></li>\n<p>更新后的数据：</p>\n<p>{id:3, name:'小王', age:20},</p>\n<p>{id:1, name:'小张', age:18},</p>\n<p>{id:2, name:'小李', age:19},</p>\n<p>更新数据后的虚拟 DOM：</p>\n<li key=0>小王---20<input type=\"text\"/></li>\n<li key=1>小张---18<input type=\"text\"/></li>\n<li key=2>小李---19<input type=\"text\"/></li>\n<p>-----------------------------------------------------------------</p>\n<p>慢动作回放----使用 id 唯一标识作为 key</p>\n<p>初始数据：</p>\n<p>{id:1, name:'小张', age:18},</p>\n<p>{id:2, name:'小李', age:19},</p>\n<p>初始的虚拟 DOM：</p>\n<li key=1>小张---18<input type=\"text\"/></li>\n<li key=2>小李---19<input type=\"text\"/></li>\n<p>更新后的数据：</p>\n<p>{id:3, name:'小王', age:20},</p>\n<p>{id:1, name:'小张', age:18},</p>\n<p>{id:2, name:'小李', age:19},</p>\n<p>更新数据后的虚拟 DOM：</p>\n<li key=3>小王---20<input type=\"text\"/></li>\n<li key=1>小张---18<input type=\"text\"/></li>\n<li key=2>小李---19<input type=\"text\"/></li>\n<h1 id=\"第八章-hoooks\"><a class=\"header-anchor\" href=\"#第八章-hoooks\">#</a> 第八章.hoooks</h1>\n<h2 id=\"react-hooks-是什么\"><a class=\"header-anchor\" href=\"#react-hooks-是什么\">#</a> React Hooks 是什么？</h2>\n<p>Hooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。</p>\n<p>假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解的概念可能更多一些，比如 Javascript 的类的概念，this 上下文的指向等。</p>\n"
    }
  ],
  "themeConfig": {
    "logo": "//yun.duiba.com.cn/aurora/assets/28757dfc494a84649d1b9e9e9daa3a57420d00cd.jpeg",
    "nav": [
      {
        "text": "HOME",
        "link": "/"
      },
      {
        "text": "NOTE",
        "link": "/Note/"
      },
      {
        "text": "DEMO",
        "link": "/DEMO/"
      },
      {
        "text": "git",
        "link": "https://github.com/secret821/liuyan.github.io"
      },
      {
        "text": "微博",
        "link": "https://weibo.com/u/7346009584"
      }
    ],
    "sidebar": {
      "/Note/": [
        "react",
        "微信小程序",
        "UniApp",
        "game"
      ],
      "/DEMO/": [
        "动态背景图",
        "时钟",
        "贪吃蛇",
        "填色游戏",
        "拼图游戏"
      ]
    },
    "sidebarDepth": 2
  }
}